Left View
---------

void leftView(Node *root)
{
  if(root == NULL)
    return;
    
   queue<Node*> q;
   q.push(root);
   
   while(!q.empty())
   {
      int n = q.size();
      
      for(int i=1;i<=n;i++)
      {
        Node *tmp = q.front();
        q.pop();
        
        
        if(i == 1)
          cout<<tmp->data<<" ";
          
         if(tmp->left)
          q.push(tmp->left);
          
          
          if(tmp->right)
          q.push(tmp->right);
 
      }
   }

}


Right View
----------


void printRightView(Node* root)
{
    if (!root)
        return;
  
    queue<Node*> q;
    q.push(root);
  
    while (!q.empty())
    {    
        // number of nodes at current level
        int n = q.size();
          
        // Traverse all nodes of current level 
        for(int i = 1; i <= n; i++)
        {
            Node* temp = q.front();
            q.pop();
                  
            // Print the right most element 
            // at the level
            if (i == n)
                cout<<temp->data<<" ";
              
            // Add left node to queue
            if (temp->left != NULL)
                q.push(temp->left);
  
            // Add right node to queue
            if (temp->right != NULL)
                q.push(temp->right);
        }
    }
}    


Top View
-------

vector<int> topView(struct Node *root)
 {
 
        vector<int> ans;
        
        if(root == NULL){
            return ans;
        }
    
        Node *temp = NULL;
    
        queue<pair<Node *, int>> q;
    
        map<int, int> mp;
    
        q.push({root, 0});
    
        // doing level order traversal and finding the extreme elements
        while(!q.empty()){
    
            temp = q.front().first;
            int d = q.front().second;
            q.pop();
    
            if(mp.find(d) == mp.end()){
                // cout << temp->data << " ";
                mp[d] = temp->data;
            }
    
            if(temp->left){
                q.push({temp->left, d-1});
            }
    
            if(temp->right){
                q.push({temp->right, d+1});
            }
        }
    
        for(auto it = mp.begin(); it != mp.end(); it++){
            ans.push_back(it->second);
        }
        
        return ans;
 
 }
